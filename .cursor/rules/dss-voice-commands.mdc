---
description:
globs:
alwaysApply: false
---
# DSS Voice Command Handler

## Voice Command Recognition

When the user says any of these commands, provide the appropriate DSS response:

### Repository Transformation Commands
- "Format this repo" / "Format repo" / "Apply DSS formatting"
- "Transform this repository to DSS structure" / "Transform to DSS"
- "Apply DSS" / "Convert to DSS" / "DSS-ify this repo"

**Response for transformation commands:**
```
I'll help you transform this repository to DSS structure! 

**Quick Option:** If you have `dss_bootstrap.py` in the root:
```bash
python dss_bootstrap.py
```

**Download Option:** If you don't have the bootstrap file:
```bash
# Download and run DSS bootstrap
curl -sSL https://raw.githubusercontent.com/Dub1n/dss/main/meta/scripts/dss_bootstrap.py -o dss_bootstrap.py
python dss_bootstrap.py
```

**Advanced Option:** For more control:
```bash
# Download full auto-formatter
curl -sSL https://raw.githubusercontent.com/Dub1n/dss/main/meta/scripts/install_dss_autoformatter.py | python3
```

This will:
✅ Transform your repository to DSS structure
✅ Install Cursor AI intelligence with project-specific context  
✅ Set up voice commands for ongoing DSS operations
✅ Preserve your original repository (creates new DSS version)

After transformation, I'll understand DSS conventions and can help with:
- Creating properly formatted files with frontmatter
- Generating documentation following DSS templates
- Organizing code according to DSS structure
- Managing project metadata and cross-references
```

### File Creation Commands
- "Create new analysis notebook" / "Add analysis notebook"
- "Create new Python module" / "Add Python file"
- "Create documentation" / "Add documentation"
- "Create test file" / "Add test"

**Response for file creation:**
```
I'll create a new [file type] following DSS conventions with proper frontmatter and structure.

What would you like to name the file, and what's its main purpose?

I'll automatically:
✅ Place it in the correct DSS directory (src/, data/, docs/, tests/)
✅ Add appropriate YAML frontmatter with tags, provides, requires
✅ Include relevant imports and boilerplate code
✅ Follow project-specific templates if available
```

### Documentation Commands
- "Generate documentation" / "Create docs" / "Update documentation"
- "Update project index" / "Refresh index" / "Update INDEX.md"
- "Create project overview" / "Generate overview"

### Project Management Commands  
- "Show DSS structure" / "Explain DSS layout"
- "What's the DSS convention for [X]?" / "How should I organize [X] in DSS?"

## Enhanced Assistant Behavior

When working in a DSS repository, I automatically:

1. **Understand project structure** and place files appropriately
2. **Apply consistent frontmatter** with relevant metadata
3. **Use project templates** from meta/templates/ when available
4. **Cross-reference files** using proper DSS linking conventions
5. **Follow naming conventions** and file organization rules
6. **Generate appropriate documentation** for new code
7. **Maintain INDEX.md** and other structural files
8. **Suggest improvements** for DSS compliance

## Project Type Adaptations

I adapt my behavior based on detected project type:

- **Data Science**: Prioritize notebooks, data files, analysis workflows
- **Web Application**: Focus on components, routes, frontend/backend separation  
- **Python Package**: Emphasize modules, testing, package structure
- **Documentation**: Optimize for content creation and cross-linking
- **General**: Apply standard DSS conventions with flexibility

## Bootstrap Integration

If `dss_bootstrap.py` exists in the repository root, I know this repository can be instantly transformed to DSS structure. I'll suggest running it when users ask about DSS formatting.

If `.cursor/rules/` contains DSS files, I know the repository already has DSS intelligence installed and will behave accordingly.

## Command Examples

### Creating Files
User: "Create a data processing script"
Response: I'll create a Python script in `src/` with proper DSS frontmatter for data processing.

User: "Add a new analysis notebook" 
Response: I'll create a Jupyter notebook in the appropriate directory with DSS metadata and analysis structure.

### Repository Operations
User: "Format this repo"
Response: [Provides bootstrap instructions as shown above]

User: "Update the project index"
Response: I'll refresh INDEX.md with the current project structure and file descriptions.

This voice command system makes DSS transformation and management as simple as speaking naturally to the AI assistant!
