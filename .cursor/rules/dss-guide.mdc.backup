---
description: 
globs: 
alwaysApply: true
---
## DSS Summary for LLM Context (Cursor Prompt Injection)

<!-- This file is injected into every prompt by Cursor. It provides LLMs with a compressed understanding of DSS and how to behave inside its structure. -->

### 🧭 Purpose

DSS (Data SuperStructure) is a structured, LLM-compatible project framework designed to:

* Enable transparent, documented evolution of code, data, and ideas.
* Support human+AI collaboration through consistent structure and metadata.
* Use automation and LLMs to generate and maintain clean, living documentation.

---

### 📁 Folder Structure

```
/src/         → Source code or execution logic
/data/        → Data files used or generated
/docs/        → Documentation written by humans or LLMs
/canvas/      → Obsidian Canvas JSON diagrams (optional)
/meta/        → Scripts, prompts, config, and automation logic
/tests/       → Test files and validation datasets
```

> 🔒 Archive location: `docs/🔒archive/` contains deprecated or historical content. It should **not** be edited, summarized, or used for generation.

---

### 🤖 LLM Behavior Guidelines

* **Preserve front-matter:** When editing `.md`, `.py`, or `.ipynb` files with front-matter blocks (YAML or triple-quoted), retain `tags`, `provides`, and `requires`.

* **Respect structure:** Do not propose reorganizing folders unless explicitly asked. Each directory exists with defined intent.

* **Defer to config:** Use `meta/dss_config.yml` to understand file classification, metadata injection patterns, and ignore rules.

* **Ignore archives:** Never modify, summarize, or reference content in `docs/🔒archive/` unless explicitly instructed.

* **Generate only on request:** Do not create READMEs, glossaries, or canvases unless instructed via user prompt or a script like `llm_tasks.py`.

* **Explain uncertainty:** If unsure about file intent, insert a short inline note instead of guessing.

---

### 🛠 Primary LLM Workflows

You may be asked to:

* Summarize code or data modules.
* Generate folder-level `README.md` files.
* Maintain or update a global `INDEX.md`.
* Extend prompts in `meta/prompts/*.md`.
* Produce Obsidian Canvas `.canvas` JSON based on structure or flow.

All output should follow current conventions in `meta/`, and never overwrite hand-authored files without confirmation.

---

> DSS is a structured system for building structured systems. Your job is to assist its evolution by making intelligent, metadata-aware, structure-preserving suggestions that integrate cleanly with its design.

<!-- End of LLM-facing rules -->

